#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <ultra_complex_communication/trilizaAction.h>

class server
{
protected:

  std::string nodeName;
  char board[9] = {' ',' ',' ',' ',' ',' ',' ',' ',' '};
  // create the action client
  // true causes the client to spin its own thread
  actionlib::SimpleActionClient<ultra_complex_communication::trilizaAction> ac1("p1", true);
  actionlib::SimpleActionClient<ultra_complex_communication::trilizaAction> ac2("p2", true);

public:

  server(std::string name) :
    nodeName(name)
  {
    ROS_INFO("Waiting for action servers to start.");
    // wait for the action server to start
    ac1.waitForServer(); //will wait for infinite time
    ac2.waitForServer(); //will wait for infinite time

    ROS_INFO("Action servers started, sending goal.");

    

    ultra_complex_communication::trilizaGoal goal;
    goal.tbl = board;
    
    
    ac1.sendGoal(goal);

    //wait for the action to return
    bool finished_before_timeout = ac.waitForResult(ros::Duration(30.0));

    if (finished_before_timeout)
    {
      actionlib::SimpleClientGoalState state = ac.getState();
      ROS_INFO("Action finished: %s",state.toString().c_str());
    }
    else
      ROS_INFO("Action did not finish before the time out.");
  }

}

int main (int argc, char **argv)
{
  ros::init(argc, argv, "control");

  server serve(ros::this_node::getName());

  return 0; //exit
}

